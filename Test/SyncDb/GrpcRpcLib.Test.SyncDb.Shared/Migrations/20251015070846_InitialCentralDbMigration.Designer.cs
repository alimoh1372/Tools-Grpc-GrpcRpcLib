// <auto-generated />
using System;
using GrpcRpcLib.Test.SyncDb.Shared.CentralDbContextAggregate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GrpcRpcLib.Test.SyncDb.Shared.Migrations
{
    [DbContext(typeof(CentralDbContext))]
    [Migration("20251015070846_InitialCentralDbMigration")]
    partial class InitialCentralDbMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrpcRpcLib.Test.SyncDb.Shared.Entities.AggregateSequence", b =>
                {
                    b.Property<string>("AggregateType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AggregateId")
                        .HasColumnType("int");

                    b.Property<long>("LastSequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("AggregateType", "AggregateId");

                    b.ToTable("AggregateSequences", (string)null);
                });

            modelBuilder.Entity("GrpcRpcLib.Test.SyncDb.Shared.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AggregateId")
                        .HasColumnType("int");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastAttemptAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("ProcessorInstanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("EventId");

                    b.HasIndex("Status");

                    b.HasIndex("AggregateType", "AggregateId", "SequenceNumber");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("GrpcRpcLib.Test.SyncDb.Shared.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Sku = "P-001",
                            Title = "Prod A"
                        },
                        new
                        {
                            Id = 2,
                            Sku = "P-002",
                            Title = "Prod B"
                        },
                        new
                        {
                            Id = 3,
                            Sku = "P-003",
                            Title = "Prod C"
                        });
                });

            modelBuilder.Entity("GrpcRpcLib.Test.SyncDb.Shared.Entities.ReplayJob", b =>
                {
                    b.Property<long>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobId"));

                    b.Property<int>("AggregateId")
                        .HasColumnType("int");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<long>("FromSequence")
                        .HasColumnType("bigint");

                    b.Property<string>("LastError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastRunAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestorService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<long>("ToSequence")
                        .HasColumnType("bigint");

                    b.HasKey("JobId");

                    b.HasIndex("Status");

                    b.ToTable("ReplayJobs", (string)null);
                });

            modelBuilder.Entity("GrpcRpcLib.Test.SyncDb.Shared.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "User One",
                            Username = "u1"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "User Two",
                            Username = "u2"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "User Three",
                            Username = "u3"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
